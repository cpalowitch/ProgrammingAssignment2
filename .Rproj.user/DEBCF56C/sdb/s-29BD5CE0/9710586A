{
    "contents" : "## Last changed 4/27 3:13\n## Put comments here that give an overall description of what your\n## functions do\n\n## makeCacheMatrix will return a list of functions to manage matrix inverses.\n## The key function is to cache it's inverse.\n\nmakeCacheMatrix <- function(x = matrix()) {\n        m <- NULL\n        set <- function(y) {\n                x <<- y\n                m <<- NULL\n        }\n        get <- function() x\n        setmean <- function(mean) m <<- mean\n        getmean <- function() m\n        list(set = set, get = get,\n             setmean = setmean,\n             getmean = getmean)\n}\n\n\n## Write a short comment describing this function\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n}\n\n## Here is the makeVector function to work with\nmakeVector <- function(x = numeric()) {\n        m <- NULL\n        set <- function(y) {\n                x <<- y\n                m <<- NULL\n        }\n        get <- function() x\n        setmean <- function(mean) m <<- mean\n        getmean <- function() m\n        list(set = set, get = get,\n             setmean = setmean,\n             getmean = getmean)\n}\n\n## Here is the cachemean function to work with\ncachemean <- function(x, ...) {\n        m <- x$getmean()\n        if(!is.null(m)) {\n                message(\"getting cached data\")\n                return(m)\n        }\n        data <- x$get()\n        m <- mean(data, ...)\n        x$setmean(m)\n        m\n}\n",
    "created" : 1398635500681.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2217513930",
    "id" : "9710586A",
    "lastKnownWriteTime" : 1398636815,
    "path" : "C:/Users/Carl/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}